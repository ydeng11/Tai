/*
 * This file is generated by jOOQ.
 */
package today.ihelio.jooq.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import today.ihelio.jooq.tables.Categories;
import today.ihelio.jooq.tables.records.CategoriesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoriesDao extends DAOImpl<CategoriesRecord, today.ihelio.jooq.tables.pojos.Categories, Integer> {

    /**
     * Create a new CategoriesDao without any configuration
     */
    public CategoriesDao() {
        super(Categories.CATEGORIES, today.ihelio.jooq.tables.pojos.Categories.class);
    }

    /**
     * Create a new CategoriesDao with an attached configuration
     */
    public CategoriesDao(Configuration configuration) {
        super(Categories.CATEGORIES, today.ihelio.jooq.tables.pojos.Categories.class, configuration);
    }

    @Override
    public Integer getId(today.ihelio.jooq.tables.pojos.Categories object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<today.ihelio.jooq.tables.pojos.Categories> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Categories.CATEGORIES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<today.ihelio.jooq.tables.pojos.Categories> fetchById(Integer... values) {
        return fetch(Categories.CATEGORIES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public today.ihelio.jooq.tables.pojos.Categories fetchOneById(Integer value) {
        return fetchOne(Categories.CATEGORIES.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<today.ihelio.jooq.tables.pojos.Categories> fetchOptionalById(Integer value) {
        return fetchOptional(Categories.CATEGORIES.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<today.ihelio.jooq.tables.pojos.Categories> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Categories.CATEGORIES.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<today.ihelio.jooq.tables.pojos.Categories> fetchByName(String... values) {
        return fetch(Categories.CATEGORIES.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public today.ihelio.jooq.tables.pojos.Categories fetchOneByName(String value) {
        return fetchOne(Categories.CATEGORIES.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<today.ihelio.jooq.tables.pojos.Categories> fetchOptionalByName(String value) {
        return fetchOptional(Categories.CATEGORIES.NAME, value);
    }
}
